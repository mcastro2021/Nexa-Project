#!/usr/bin/env python3
"""
Script de prueba para el Nexa WhatsApp Bot
Permite probar la funcionalidad sin enviar mensajes reales de WhatsApp
"""

import os
import sys
from dotenv import load_dotenv
from app import NexaWhatsAppBot
import json

def test_bot_responses():
    """Probar las respuestas autom√°ticas del bot"""
    print("üß™ Probando respuestas autom√°ticas...")
    
    # Crear instancia del bot
    bot = NexaWhatsAppBot()
    
    # Casos de prueba
    test_cases = [
        ("horario", "horario"),
        ("¬øCu√°l es el precio?", "precio"),
        ("D√≥nde est√°n ubicados", "ubicacion"),
        ("Necesito contactarlos", "contacto"),
        ("Qu√© servicios ofrecen", "servicios"),
        ("ayuda", "ayuda"),
        ("Hola, ¬øc√≥mo est√°n?", "gpt"),
        ("Quiero informaci√≥n sobre desarrollo web", "gpt"),
    ]
    
    for test_input, expected_type in test_cases:
        print(f"\nüìù Entrada: '{test_input}'")
        response = bot.process_message(test_input, "whatsapp:+5491111111111")
        print(f"ü§ñ Respuesta: {response[:100]}...")
        print(f"‚úÖ Tipo esperado: {expected_type}")

def test_database():
    """Probar funcionalidad de base de datos"""
    print("\nüóÑÔ∏è Probando base de datos...")
    
    bot = NexaWhatsAppBot()
    
    # Probar guardar conversaci√≥n
    test_message = "Mensaje de prueba"
    test_response = "Respuesta de prueba"
    test_phone = "whatsapp:+5491111111111"
    
    bot.save_conversation(test_phone, test_message, test_response)
    print("‚úÖ Conversaci√≥n guardada")
    
    # Probar obtener historial
    history = bot.get_conversation_history(test_phone)
    print(f"‚úÖ Historial obtenido: {len(history)} mensajes")
    
    # Probar estad√≠sticas
    stats = bot.get_statistics()
    print(f"‚úÖ Estad√≠sticas: {stats.json}")

def test_api_endpoints():
    """Probar endpoints de la API"""
    print("\nüåê Probando endpoints de la API...")
    
    bot = NexaWhatsAppBot()
    
    with bot.app.test_client() as client:
        # Health check
        response = client.get('/health')
        print(f"‚úÖ Health check: {response.status_code}")
        
        # Stats
        response = client.get('/stats')
        print(f"‚úÖ Stats: {response.status_code}")
        
        # Webhook (simulado)
        response = client.post('/webhook', data={
            'Body': 'horario',
            'From': 'whatsapp:+5491111111111'
        })
        print(f"‚úÖ Webhook: {response.status_code}")

def test_configuration():
    """Verificar configuraci√≥n"""
    print("\n‚öôÔ∏è Verificando configuraci√≥n...")
    
    load_dotenv()
    
    required_vars = [
        'TWILIO_ACCOUNT_SID',
        'TWILIO_AUTH_TOKEN', 
        'WHATSAPP_FROM',
        'OPENAI_API_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: Configurado")
        else:
            print(f"‚ùå {var}: Faltante")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è Variables faltantes: {', '.join(missing_vars)}")
        print("Por favor, configura estas variables en tu archivo .env")
    else:
        print("\n‚úÖ Todas las variables de entorno est√°n configuradas")

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 50)
    print("    NEXA WHATSAPP BOT - PRUEBAS")
    print("=" * 50)
    
    try:
        # Verificar configuraci√≥n
        test_configuration()
        
        # Probar respuestas del bot
        test_bot_responses()
        
        # Probar base de datos
        test_database()
        
        # Probar endpoints
        test_api_endpoints()
        
        print("\n" + "=" * 50)
        print("‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
